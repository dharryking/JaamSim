{"name":"JaamSim","tagline":"JaamSim Discrete Event Simulation","body":"# What is this?\r\n\r\nJaamSim is a discrete-event simulation environment developed by Ausenco \r\nSandwell as the foundation of all our simulation applications. It \r\nrepresents about 10 man-years of effort since 2002 and in under \r\ncontinuous development to support our simulation projects. JaamSim is \r\nused daily by our team of 16 simulation analysts and programmers. \r\n\r\nExamples of our simulation models can be seen at: \r\nwww.youtube.com/user/javasimulation. \r\n\r\nJaamSim is written in the Java programming language and includes a \r\ndrag-and-drop user interface, interactive 3D graphics, input and output \r\nprocessing, and model development tools and editors. \r\n\r\nThe key feature that makes JaamSim different from commercial off-the-shelf \r\nsimulation software is that it allows a user to develop new pallets of \r\nhigh-level objects for a given application. These objects will automatically \r\nhave 3D graphics, be available in the drag-and-drop interface, and have their \r\ninputs editable through the Input Editor. Users can focus on the logic for their \r\nobjects without having to program a user interface and input/output processing. \r\n\r\nAll the coding for new objects is done in standard Java using standard \r\ndevelopment tools such as Eclipse. There is no need for the specialised \r\nsimulation languages, process flow diagrams, or scripting languages used by \r\ncommercial off-the-shelf simulation software. Model logic can be coded directly \r\nin either a event- or process-oriented style using a few simple classes and \r\nmethods provided by JaamSim. \r\n\r\nThis first release includes only a few graphical objects that can be \r\ndragged-and-dropped. Pallets of basic objects such as queues, servers, etc. will \r\nbe added in the next few months. \r\n\r\n# Dependencies and Installation\r\n\r\nA copy of all dependencies is shipped in the jar/ folder and are as follows:\r\n\r\njogl2 - from the jogamp.org people\r\n\r\nSimply run the build.sh script from the top level to produce a functional jar 'JaamSim.jar',\r\nyou'll need to have the prerequisites from the jar/ folder in you classpath.\r\n\r\nTo build it in another environment, link the jar/ folder as an external \r\nclasspath folder, or download your own copy of JOGL2.\r\n\r\n\r\n# License\r\n\r\nJaamSim is GPLv3\r\n\r\n# Contact\r\n\r\nFor licensing and general inquiries:\r\nDr. Harry King <harry.king@ausenco.com>\r\n\r\nIf you have any problems building the source or technical inquiries:\r\nHarvey Harrison <harvey.harrison@ausenco.com>\r\n\r\n# Todo\r\n\r\n- Further tightening of the code now that JaamSim is a standalone application\r\n- Pallets of basic objects such as queue, server, source, sink, etc.\r\n- Inputs files for example models\r\n- User manual\r\n- Programming guide\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}